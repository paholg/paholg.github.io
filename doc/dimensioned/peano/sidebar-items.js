initSidebarItems({"struct":[["Pred","For any non-positive Peano number `N`, we define its predecessor, `Pred<N>`."],["Succ","For any non-negative Peano number `N`, we define its successor, `Succ<N>`."],["Zero","The type corresponding to the Peano number 0."]],"trait":[["NonNeg","All numbers of the form `Succ<N>` and `Zero` will belong to the trait **NonNeg**."],["NonPos","All numbers of the form `Pred<N>` and `Zero` will belong to the trait **NonPos**."],["NonZero","All numbers of the form `Succ<M>` or `Pred<N>` will belong to the trait **NonZero**."],["Peano","All numbers defined in this module will belong to the **Peano** trait."],["Same","`Same` is used to ensure that two types are the same. Its `Output` should be that type. # Example: ``` use dimensioned::peano::{Succ, One, Two, Same, ToInt};"],["ToInt","Convert a Peano number to the integer it represents."]],"type":[["Eight",""],["Five",""],["Four",""],["NegEight",""],["NegFive",""],["NegFour",""],["NegNine",""],["NegOne",""],["NegSeven",""],["NegSix",""],["NegTen",""],["NegThree",""],["NegTwo",""],["Nine",""],["One",""],["Seven",""],["Six",""],["Ten",""],["Three",""],["Two",""]]});