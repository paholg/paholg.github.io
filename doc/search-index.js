var searchIndex = {};
searchIndex['typenum'] = {"items":[[0,"","typenum","",null,null],[0,"bit","","",null,null],[3,"B0","typenum::bit","The compile time bit 0",null,null],[3,"B1","","The compile time bit 1",null,null],[8,"Bit","","The trait for compile time bits; nothing besides B0 and B1 should implement this.",null,null],[10,"to_int","","Gives the integer value for this bit.",0,{"inputs":[{"name":"bit"}],"output":{"name":"u8"}}],[10,"to_bool","","",0,{"inputs":[{"name":"bit"}],"output":{"name":"bool"}}],[11,"to_int","","",1,{"inputs":[{"name":"b0"}],"output":{"name":"u8"}}],[11,"to_bool","","",1,{"inputs":[{"name":"b0"}],"output":{"name":"bool"}}],[11,"to_int","","",2,{"inputs":[{"name":"b1"}],"output":{"name":"u8"}}],[11,"to_bool","","",2,{"inputs":[{"name":"b1"}],"output":{"name":"bool"}}],[0,"uint","typenum","",null,null],[3,"UTerm","typenum::uint","The terminating type for `UInt`, it always comes after the most significant bit.",null,null],[3,"UInt","","UInt is defined recursevly, where B is the least significant bit and U is the rest\nof the number. U can be another UInt or UTerm. In order to keep numbers unique, leading\nzeros are not allowed, so `UInt<UTerm, B0>` should never show up anywhere ever.",null,null],[6,"U0","","",null,null],[6,"U1","","",null,null],[6,"U2","","",null,null],[6,"U3","","",null,null],[6,"U4","","",null,null],[6,"U5","","",null,null],[6,"U6","","",null,null],[6,"U7","","",null,null],[6,"U8","","",null,null],[6,"U9","","",null,null],[6,"U10","","",null,null],[6,"U11","","",null,null],[6,"U12","","",null,null],[6,"U13","","",null,null],[6,"U14","","",null,null],[6,"U15","","",null,null],[6,"U16","","",null,null],[6,"U17","","",null,null],[6,"U18","","",null,null],[6,"U19","","",null,null],[6,"U20","","",null,null],[6,"U21","","",null,null],[6,"U22","","",null,null],[6,"U23","","",null,null],[6,"U24","","",null,null],[6,"U25","","",null,null],[6,"U26","","",null,null],[6,"U27","","",null,null],[6,"U28","","",null,null],[6,"U29","","",null,null],[6,"U30","","",null,null],[6,"U31","","",null,null],[6,"U32","","",null,null],[6,"U64","","",null,null],[6,"U128","","",null,null],[6,"U256","","",null,null],[6,"U512","","",null,null],[6,"U1024","","",null,null],[6,"U2048","","",null,null],[6,"U4096","","",null,null],[6,"U8192","","",null,null],[6,"U16384","","",null,null],[6,"U32768","","",null,null],[6,"U65536","","",null,null],[8,"Unsigned","","This trait is implemented for the all things that a `UInt` can take as a parameter,\nwhich is just `UInt` and `UTerm` (used to terminate the `UInt`). It should not be\nimplemented for anything outside this crate.",null,null],[10,"to_int","","",3,{"inputs":[{"name":"unsigned"}],"output":{"name":"u64"}}],[11,"to_int","","",4,{"inputs":[{"name":"uterm"}],"output":{"name":"u64"}}],[11,"to_int","","",5,{"inputs":[{"name":"uint"}],"output":{"name":"u64"}}],[0,"int","typenum","",null,null],[3,"Positive","typenum::int","A type representing a positive flag",null,null],[3,"Negative","","A type representing a negative flag",null,null],[3,"Int","","`Int` is defined as a `UInt` with a sign flag.",null,null],[8,"Signed","","This trait is implemented for the all things that an `Int` can take as a parameter,\nwhich is just `Int` and `ITerm` (used to terminate the `Int`). It should not be\nimplemented for anything outside this crate.",null,null],[10,"to_int","","",6,{"inputs":[{"name":"signed"}],"output":{"name":"i64"}}],[8,"Sign","","A trait for `Positive` and `Negative`, to represent the sign of an integer. It\nshould not be implemented for anything outside this crate.",null,null],[11,"to_int","","",7,{"inputs":[{"name":"int"}],"output":{"name":"i64"}}],[11,"to_int","","",7,{"inputs":[{"name":"int"}],"output":{"name":"i64"}}],[8,"Same","typenum","",null,null],[16,"Output","","`Output` should always be `Self`",8,null],[8,"Not","","",null,null],[16,"Output","","",9,null],[8,"And","","",null,null],[16,"Output","","",10,null],[8,"Or","","",null,null],[16,"Output","","",11,null],[8,"Xor","","",null,null],[16,"Output","","",12,null],[8,"Shl","","",null,null],[16,"Output","","",13,null],[8,"Shr","","",null,null],[16,"Output","","",14,null],[8,"Add","","",null,null],[16,"Output","","",15,null],[8,"Sub","","",null,null],[16,"Output","","",16,null],[8,"Mul","","",null,null],[16,"Output","","",17,null],[8,"Div","","",null,null],[16,"Output","","",18,null]],"paths":[[8,"Bit"],[3,"B0"],[3,"B1"],[8,"Unsigned"],[3,"UTerm"],[3,"UInt"],[8,"Signed"],[3,"Int"],[8,"Same"],[8,"Not"],[8,"And"],[8,"Or"],[8,"Xor"],[8,"Shl"],[8,"Shr"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"]]};
initSearch(searchIndex);
