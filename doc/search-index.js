var searchIndex = {};
searchIndex['typenum'] = {"items":[[0,"","typenum","",null,null],[0,"bit","","",null,null],[3,"B0","typenum::bit","The compile time bit 0",null,null],[3,"B1","","The compile time bit 1",null,null],[8,"Bit","","The trait for compile time bits; nothing besides B0 and B1 should implement this.",null,null],[10,"to_int","","Gives the integer value for this bit.",0,{"inputs":[{"name":"bit"}],"output":{"name":"u8"}}],[10,"to_bool","","",0,{"inputs":[{"name":"bit"}],"output":{"name":"bool"}}],[11,"to_int","","",1,{"inputs":[{"name":"b0"}],"output":{"name":"u8"}}],[11,"to_bool","","",1,{"inputs":[{"name":"b0"}],"output":{"name":"bool"}}],[11,"to_int","","",2,{"inputs":[{"name":"b1"}],"output":{"name":"u8"}}],[11,"to_bool","","",2,{"inputs":[{"name":"b1"}],"output":{"name":"bool"}}],[0,"uint","typenum","",null,null],[3,"UTerm","typenum::uint","The terminating type for `UInt`, it always comes after the most significant bit.",null,null],[3,"UInt","","UInt is defined recursevly, where B is the least significant bit and U is the rest\nof the number. U can be another UInt or UTerm. In order to keep numbers unique, leading\nzeros are not allowed, so `UInt<UTerm, B0>` should never show up anywhere ever.",null,null],[8,"Unsigned","","This trait is implemented for the all things that a `UInt` can take as a parameter,\nwhich is just `UInt` and `UTerm` (used to terminate the `UInt`). It should not be\nimplemented for anything outside this crate.",null,null],[10,"to_int","","",3,{"inputs":[{"name":"unsigned"}],"output":{"name":"u64"}}],[11,"to_int","","",4,{"inputs":[{"name":"uterm"}],"output":{"name":"u64"}}],[11,"to_int","","",5,{"inputs":[{"name":"uint"}],"output":{"name":"u64"}}],[0,"const_uints","typenum","",null,null],[6,"U0","typenum::const_uints","",null,null],[6,"U1","","",null,null],[6,"U2","","",null,null],[6,"U3","","",null,null],[6,"U4","","",null,null],[6,"U5","","",null,null],[6,"U6","","",null,null],[6,"U7","","",null,null],[6,"U8","","",null,null],[6,"U9","","",null,null],[6,"U10","","",null,null],[6,"U11","","",null,null],[6,"U12","","",null,null],[6,"U13","","",null,null],[6,"U14","","",null,null],[6,"U15","","",null,null],[6,"U16","","",null,null],[6,"U17","","",null,null],[6,"U18","","",null,null],[6,"U19","","",null,null],[6,"U20","","",null,null],[6,"U21","","",null,null],[6,"U22","","",null,null],[6,"U23","","",null,null],[6,"U24","","",null,null],[6,"U25","","",null,null],[6,"U26","","",null,null],[6,"U27","","",null,null],[6,"U28","","",null,null],[6,"U29","","",null,null],[6,"U30","","",null,null],[6,"U31","","",null,null],[6,"U32","","",null,null],[6,"U33","","",null,null],[6,"U34","","",null,null],[6,"U35","","",null,null],[6,"U36","","",null,null],[6,"U37","","",null,null],[6,"U38","","",null,null],[6,"U39","","",null,null],[6,"U40","","",null,null],[6,"U41","","",null,null],[6,"U42","","",null,null],[6,"U43","","",null,null],[6,"U44","","",null,null],[6,"U45","","",null,null],[6,"U46","","",null,null],[6,"U47","","",null,null],[6,"U48","","",null,null],[6,"U49","","",null,null],[6,"U50","","",null,null],[6,"U51","","",null,null],[6,"U52","","",null,null],[6,"U53","","",null,null],[6,"U54","","",null,null],[6,"U55","","",null,null],[6,"U56","","",null,null],[6,"U57","","",null,null],[6,"U58","","",null,null],[6,"U59","","",null,null],[6,"U60","","",null,null],[6,"U61","","",null,null],[6,"U62","","",null,null],[6,"U63","","",null,null],[6,"U64","","",null,null],[6,"U65","","",null,null],[6,"U66","","",null,null],[6,"U67","","",null,null],[6,"U68","","",null,null],[6,"U69","","",null,null],[6,"U70","","",null,null],[6,"U71","","",null,null],[6,"U72","","",null,null],[6,"U73","","",null,null],[6,"U74","","",null,null],[6,"U75","","",null,null],[6,"U76","","",null,null],[6,"U77","","",null,null],[6,"U78","","",null,null],[6,"U79","","",null,null],[6,"U80","","",null,null],[6,"U81","","",null,null],[6,"U82","","",null,null],[6,"U83","","",null,null],[6,"U84","","",null,null],[6,"U85","","",null,null],[6,"U86","","",null,null],[6,"U87","","",null,null],[6,"U88","","",null,null],[6,"U89","","",null,null],[6,"U90","","",null,null],[6,"U91","","",null,null],[6,"U92","","",null,null],[6,"U93","","",null,null],[6,"U94","","",null,null],[6,"U95","","",null,null],[6,"U96","","",null,null],[6,"U97","","",null,null],[6,"U98","","",null,null],[6,"U99","","",null,null],[6,"U100","","",null,null],[6,"U101","","",null,null],[6,"U102","","",null,null],[6,"U103","","",null,null],[6,"U104","","",null,null],[6,"U105","","",null,null],[6,"U106","","",null,null],[6,"U107","","",null,null],[6,"U108","","",null,null],[6,"U109","","",null,null],[6,"U110","","",null,null],[6,"U111","","",null,null],[6,"U112","","",null,null],[6,"U113","","",null,null],[6,"U114","","",null,null],[6,"U115","","",null,null],[6,"U116","","",null,null],[6,"U117","","",null,null],[6,"U118","","",null,null],[6,"U119","","",null,null],[6,"U120","","",null,null],[6,"U121","","",null,null],[6,"U122","","",null,null],[6,"U123","","",null,null],[6,"U124","","",null,null],[6,"U125","","",null,null],[6,"U126","","",null,null],[6,"U127","","",null,null],[6,"U128","","",null,null],[6,"U256","","",null,null],[6,"U512","","",null,null],[6,"U1024","","",null,null],[6,"U2048","","",null,null],[6,"U4096","","",null,null],[6,"U8192","","",null,null],[6,"U16384","","",null,null],[6,"U32768","","",null,null],[6,"U65536","","",null,null],[0,"int","typenum","",null,null],[3,"Positive","typenum::int","A type representing a positive flag",null,null],[3,"Negative","","A type representing a negative flag",null,null],[3,"Int","","`Int` is defined as a `UInt` with a sign flag.",null,null],[8,"Signed","","This trait is implemented for the all things that an `Int` can take as a parameter,\nwhich is just `Int` and `ITerm` (used to terminate the `Int`). It should not be\nimplemented for anything outside this crate.",null,null],[10,"to_int","","",6,{"inputs":[{"name":"signed"}],"output":{"name":"i64"}}],[8,"Sign","","A trait for `Positive` and `Negative`, to represent the sign of an integer. It\nshould not be implemented for anything outside this crate.",null,null],[11,"to_int","","",7,{"inputs":[{"name":"int"}],"output":{"name":"i64"}}],[11,"to_int","","",7,{"inputs":[{"name":"int"}],"output":{"name":"i64"}}],[0,"__private","typenum","This module is for things that are conceptually private but that must be made public for\ntypenum to work correctly.",null,null],[3,"InvertedUTerm","typenum::__private","Terminating character for `InvertedUInt`s",null,null],[3,"InvertedUInt","","Inverted UInt (has most significant digit on the outside)",null,null],[8,"Trim","","Convenience trait. Calls Invert -> TrimTrailingZeros -> Invert",null,null],[16,"Output","","",8,null],[8,"TrimTrailingZeros","","Gets rid of all zeros until it hits a one.",null,null],[16,"Output","","",9,null],[8,"Invert","","Converts between standard numbers and inverted ones that have the most significant\ndigit on the outside.",null,null],[16,"Output","","",10,null],[8,"PrivateInvert","","Doubly private! Called by invert to make the magic happen once its done the first step.\nThe Rhs is what we've got so far.",null,null],[16,"Output","","",11,null],[8,"PrivateAnd","","Does the real anding for `UInt`s; `And` just calls this and then `Trim`.",null,null],[16,"Output","","",12,null],[8,"PrivateXor","","Does the real xoring for `UInt`s; `Xor` just calls this and then `Trim`.",null,null],[16,"Output","","",13,null],[8,"PrivateSub","","Does the real subtraction for `UInt`s; `Sub` just calls this and then `Trim`.",null,null],[16,"Output","","",14,null],[8,"InvertedUnsigned","","Inverted unsigned numbers",null,null],[10,"to_int","","",15,{"inputs":[{"name":"invertedunsigned"}],"output":{"name":"u64"}}],[11,"to_int","","",16,{"inputs":[{"name":"inverteduterm"}],"output":{"name":"u64"}}],[11,"to_int","","",17,{"inputs":[{"name":"inverteduint"}],"output":{"name":"u64"}}],[8,"Same","typenum","",null,null],[16,"Output","","`Output` should always be `Self`",18,null],[8,"Not","","",null,null],[16,"Output","","",19,null],[8,"Neg","","",null,null],[16,"Output","","",20,null],[8,"And","","",null,null],[16,"Output","","",21,null],[8,"Or","","",null,null],[16,"Output","","",22,null],[8,"Xor","","",null,null],[16,"Output","","",23,null],[8,"Shl","","",null,null],[16,"Output","","",24,null],[8,"Shr","","",null,null],[16,"Output","","",25,null],[8,"Add","","",null,null],[16,"Output","","",26,null],[8,"Sub","","",null,null],[16,"Output","","",27,null],[8,"Mul","","",null,null],[16,"Output","","",28,null],[8,"Div","","",null,null],[16,"Output","","",29,null],[8,"Rem","","",null,null],[16,"Output","","",30,null]],"paths":[[8,"Bit"],[3,"B0"],[3,"B1"],[8,"Unsigned"],[3,"UTerm"],[3,"UInt"],[8,"Signed"],[3,"Int"],[8,"Trim"],[8,"TrimTrailingZeros"],[8,"Invert"],[8,"PrivateInvert"],[8,"PrivateAnd"],[8,"PrivateXor"],[8,"PrivateSub"],[8,"InvertedUnsigned"],[3,"InvertedUTerm"],[3,"InvertedUInt"],[8,"Same"],[8,"Not"],[8,"Neg"],[8,"And"],[8,"Or"],[8,"Xor"],[8,"Shl"],[8,"Shr"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"]]};
initSearch(searchIndex);
